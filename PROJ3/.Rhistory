x <- c(4.79,10.89,6.54,22.15);
n=length(x);
neg.loglik.fun <- function(theta)
{
result <- n*log(theta)-((theta-1)*(sum(log(x))))
return(-result)
}
optim(theta <- 1,neg.loglik.fun, hessian=TRUE)
SE<- sqrt(diag(solve(ml.est$hessian)));
neg.loglik.fun <- function(theta)
{
result <- n*log(theta)-((theta-1)*(sum(log(x))))
return(-result)
}
#optim function to optimise the log likelihood
optim(theta <- 1,neg.loglik.fun, hessian=TRUE)
SE<- sqrt(diag(solve(ml.est$hessian)));
SE<- sqrt(diag(solve(19.93709)));
CI<-mean(x)+c(-1,1)*qnorm(1-(alpha/2))* SE;
alpha=0.05;
CI<-mean(x)+c(-1,1)*qnorm(1-(alpha/2))* SE
CI
CI<-mean(x)+c(-1,1)*1.96* SE
CI
CI<-mean(x)+c(-1,1)*qnorm(1-(alpha/2))
alpha=0.05;
CI <- mean(x) + c(-1, 1) * qnorm(1 - (alpha/2)) *SE
CI
CI <- mean(theta) + c(-1, 1) * qnorm(1 - (alpha/2)) *SE
CI
#input array
x <- c(4.79,10.89,6.54,22.15);
#length of input
n=length(x);
#negative of log likelihood function. as log likelihood by default gives minimization result.
neg.loglik.fun <- function(x)
{
result <- n*log(theta)-((theta-1)*(sum(log(x))))
return(-result)
}
#optim function to optimise the log likelihood
optim(theta <- 1,neg.loglik.fun, hessian=TRUE)
SE<- sqrt(diag(solve(19.93709)));
alpha=0.05;
CI <- mean(theta) + c(-1, 1) * qnorm(1 - (alpha/2)) *SE
CI
#input array
x <- c(4.79,10.89,6.54,22.15);
#length of input
n=length(x);
neg.loglik.fun <- function(x)
{
result <- n*log(theta)-((theta-1)*(sum(log(x))))
return(-result)
}
#optim function to optimise the log likelihood
optim(theta <- 1,neg.loglik.fun, hessian=TRUE)
alpha=0.05;
SE<- sqrt(diag(solve(ml.est$hessian)));
#optim function to optimise the log likelihood
optim(theta <- 1,neg.loglik.fun, hessian=TRUE)
neg.loglik.fun <- function(theta)
{
result <- n*log(theta)-((theta-1)*(sum(log(x))))
return(-result)
}
#optim function to optimise the log likelihood
optim(theta <- 1,neg.loglik.fun, hessian=TRUE)
#optim function to optimise the log likelihood
ml.est<-optim(theta <- 1,neg.loglik.fun, hessian=TRUE)
SE<- sqrt(diag(solve(ml.est$hessian)));
alpha=0.05;
CI <- mean(theta) + c(-1, 1) * qnorm(1 - (alpha/2)) *SE
CI <- mean(x) + c(-1, 1) * qnorm(1 - (alpha/2)) *SE
CI
CI <- mean(theta) + c(-1, 1) * qnorm(1 - (alpha/2)) *SE
#optim function to optimise the log likelihood
ml.est<-optim(theta <- 0,neg.loglik.fun, hessian=TRUE)
SE<- sqrt(diag(solve(ml.est$hessian)));
alpha=0.05;
CI <- mean(theta) + c(-1, 1) * qnorm(1 - (alpha/2)) *SE
CI
#input array
x <- c(4.79,10.89,6.54,22.15);
#length of input
n=length(x);
#negative of log likelihood function. as log likelihood by default gives minimization result.
neg.loglik.fun <- function(theta)
{
result <- n*ln(theta)-((theta-1)*(sum(ln(x))))
return(-result)
}
#optim function to optimise the log likelihood
ml.est<-optim(theta <- 0,neg.loglik.fun, hessian=TRUE)
SE<- sqrt(diag(solve(ml.est$hessian)));
alpha=0.05;
CI <- mean(theta) + c(-1, 1) * qnorm(1 - (alpha/2)) *SE
CI
neg.loglik.fun <- function(theta)
{
result <- n*ln(theta)-((theta-1)*(sum(ln(x))))
return(-result)
}
#optim function to optimise the log likelihood
ml.est<-optim(theta <- 0,neg.loglik.fun, hessian=TRUE)
CI <- mean(theta) + c(-1, 1) * qnorm(1 - (alpha/2)) *SE
CI
result <- n*log(theta)-((theta-1)*(sum(log(x))))
neg.loglik.fun <- function(theta)
{
result <- n*log(theta)-((theta-1)*(sum(log(x))))
return(-result)
}
#optim function to optimise the log likelihood
ml.est<-optim(theta <- 0,neg.loglik.fun, hessian=TRUE)
SE<- sqrt(diag(solve(ml.est$hessian)));
alpha=0.05;
CI <- mean(theta) + c(-1, 1) * qnorm(1 - (alpha/2)) *SE
CI
#optim function to optimise the log likelihood
ml.est<-optim(theta <- 0.4,neg.loglik.fun, hessian=TRUE)
SE<- sqrt(diag(solve(ml.est$hessian)));
alpha=0.05;
CI <- mean(theta) + c(-1, 1) * qnorm(1 - (alpha/2)) *SE
#optim function to optimise the log likelihood
ml.est<-optim(theta <- 0.4,neg.loglik.fun, hessian=TRUE)
ml.est
#optim function to optimise the log likelihood
ml.est<-optim(theta <- 0,neg.loglik.fun, hessian=TRUE)
ml.est
CI <- mean(theta) + c(-1, 1) * qnorm(1 - (alpha/2)) *SE
#input array
x <- c(4.79,10.89,6.54,22.15);
#length of input
n=length(x);
#negative of log likelihood function. as log likelihood by default gives minimization result.
neg.loglik.fun <- function(theta)
{
result <- n*log(theta)-((theta-1)*(sum(log(x))))
return(-result)
}
#optim function to optimise the log likelihood
ml.est<-optim(theta <- 0,neg.loglik.fun, hessian=TRUE)
ml.est
SE<- sqrt(diag(solve(ml.est$hessian)));
alpha=0.05;
CI <- mean(theta) + c(-1, 1) * qnorm(1 - (alpha/2)) *SE
CI
SE<- sqrt(diag(solve(ml.est$hessian)));
SE
alpha=0.05;
CI <- mean(theta) + c(-1, 1) * qnorm(1 - (alpha/2)) *SE
CI
SE<- sqrt(1/(ml.est$hessian)));
SE<- sqrt(1/(ml.est$hessian));
SE
SE<- sqrt(diag(solve(ml.est$hessian)));
CI <- ml.est$par + c(-1, 1) * qnorm(1 - (alpha/2)) *SE
CI
SE<- sqrt(diag(solve(ml.est$hessian)));
SE
CI <- ml.est$par + c(-1, 1) * qt(0.975, df=n-1) *SE
CI
CI <- ml.est$par + c(-1, 1) * qt(0.025, df=n-1) *SE
CI <- ml.est$par + c(-1, 1) * qnorm(1-(alpha/2)) *SE
CI
