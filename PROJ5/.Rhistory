return(ci)
}
ci.mat <- replicate(5000, conf.int(mu,N))
mean((mu>=ci.mat[1,])*(mu<=ci.mat[2,]))
library(boot);
# for generating data: true mean
lambda <- 0.01
#sample mean
mu<-(1/lambda)
#sample data
data<-rexp(n=N,rate=lambda)
#sample standard deviation
#value of alpha
alpha<-0.05
# sample size
N    <- 30
###################
# Z statistic CI #
###################
conf.int <- function(mu,N) {
y <-rexp(N, lambda)
sd<-sd(y)
ci <- mean(y) + c(-1, 1) * qnorm(1 - (alpha/2)) * sd/sqrt(N)
return(ci)
}
ci.mat <- replicate(5000, conf.int(mu,N))
mean((mu>=ci.mat[1,])*(mu<=ci.mat[2,]))
library(boot);
# for generating data: true mean
lambda <- 0.1
#sample mean
mu<-(1/lambda)
#sample data
data<-rexp(n=N,rate=lambda)
#sample standard deviation
#value of alpha
alpha<-0.05
# sample size
N    <- 30
###################
# Z statistic CI #
###################
conf.int <- function(mu,N) {
y <-rexp(N, lambda)
sd<-sd(y)
ci <- mean(y) + c(-1, 1) * qnorm(1 - (alpha/2)) * sd/sqrt(N)
return(ci)
}
ci.mat <- replicate(5000, conf.int(mu,N))
mean((mu>=ci.mat[1,])*(mu<=ci.mat[2,]))
library(boot);
# for generating data: true mean
lambda <- 1
#sample mean
mu<-(1/lambda)
#sample data
data<-rexp(n=N,rate=lambda)
#sample standard deviation
#value of alpha
alpha<-0.05
# sample size
N    <- 30
###################
# Z statistic CI #
###################
conf.int <- function(mu,N) {
y <-rexp(N, lambda)
sd<-sd(y)
ci <- mean(y) + c(-1, 1) * qnorm(1 - (alpha/2)) * sd/sqrt(N)
return(ci)
}
ci.mat <- replicate(5000, conf.int(mu,N))
mean((mu>=ci.mat[1,])*(mu<=ci.mat[2,]))
library(boot);
# for generating data: true mean
lambda <- 10
#sample mean
mu<-(1/lambda)
#sample data
data<-rexp(n=N,rate=lambda)
#sample standard deviation
#value of alpha
alpha<-0.05
# sample size
N    <- 30
###################
# Z statistic CI #
###################
conf.int <- function(mu,N) {
y <-rexp(N, lambda)
sd<-sd(y)
ci <- mean(y) + c(-1, 1) * qnorm(1 - (alpha/2)) * sd/sqrt(N)
return(ci)
}
ci.mat <- replicate(5000, conf.int(mu,N))
mean((mu>=ci.mat[1,])*(mu<=ci.mat[2,]))
library(boot);
# for generating data: true mean
lambda <- 10
#sample mean
mu<-(1/lambda)
#sample data
data<-rexp(n=N,rate=lambda)
#sample standard deviation
#value of alpha
alpha<-0.05
# sample size
N    <- 100
###################
# Z statistic CI #
###################
conf.int <- function(mu,N) {
y <-rexp(N, lambda)
sd<-sd(y)
ci <- mean(y) + c(-1, 1) * qnorm(1 - (alpha/2)) * sd/sqrt(N)
return(ci)
}
ci.mat <- replicate(5000, conf.int(mu,N))
mean((mu>=ci.mat[1,])*(mu<=ci.mat[2,]))
library(boot);
# for generating data: true mean
lambda <- 1
#sample mean
mu<-(1/lambda)
#sample data
data<-rexp(n=N,rate=lambda)
#sample standard deviation
#value of alpha
alpha<-0.05
# sample size
N    <- 100
###################
# Z statistic CI #
###################
conf.int <- function(mu,N) {
y <-rexp(N, lambda)
sd<-sd(y)
ci <- mean(y) + c(-1, 1) * qnorm(1 - (alpha/2)) * sd/sqrt(N)
return(ci)
}
ci.mat <- replicate(5000, conf.int(mu,N))
mean((mu>=ci.mat[1,])*(mu<=ci.mat[2,]))
library(boot);
# for generating data: true mean
lambda <- 0.1
#sample mean
mu<-(1/lambda)
#sample data
data<-rexp(n=N,rate=lambda)
#sample standard deviation
#value of alpha
alpha<-0.05
# sample size
N    <- 100
###################
# Z statistic CI #
###################
conf.int <- function(mu,N) {
y <-rexp(N, lambda)
sd<-sd(y)
ci <- mean(y) + c(-1, 1) * qnorm(1 - (alpha/2)) * sd/sqrt(N)
return(ci)
}
ci.mat <- replicate(5000, conf.int(mu,N))
mean((mu>=ci.mat[1,])*(mu<=ci.mat[2,]))
library(boot);
# for generating data: true mean
lambda <- 0.01
#sample mean
mu<-(1/lambda)
#sample data
data<-rexp(n=N,rate=lambda)
#sample standard deviation
#value of alpha
alpha<-0.05
# sample size
N    <- 100
###################
# Z statistic CI #
###################
conf.int <- function(mu,N) {
y <-rexp(N, lambda)
sd<-sd(y)
ci <- mean(y) + c(-1, 1) * qnorm(1 - (alpha/2)) * sd/sqrt(N)
return(ci)
}
ci.mat <- replicate(5000, conf.int(mu,N))
mean((mu>=ci.mat[1,])*(mu<=ci.mat[2,]))
# for generating data: true mean
lambda <- 0.01
#sample mean
mu<-(1/lambda)
#value of alpha
alpha<-0.05
# sample size
N    <- 10
x<-function(data,indices)
{
result <- mean(data[indices])
return(result)
}
mean_CI.bootstrap<-function(n,lambda,alpha){
data<-rexp(n=N,rate=lambda)
mean.npar.boot<-boot(data,x,R=999,sim='ordinary',stype="i")
result<-boot.ci(mean.npar.boot,conf = 1-alpha)
return(result$percent[c(4,5)])
}
ci_bootStrap.mat<-replicate(5000,mean_CI.bootstrap(n,lambda,alpha))
mean((mu>=ci_bootStrap.mat[1,])*(mu<=ci_bootStrap.mat[2,]))
library(boot);
# for generating data: true mean
lambda <- 0.01
#sample mean
mu<-(1/lambda)
#value of alpha
alpha<-0.05
# sample size
N    <- 10
###########################
# Nonparametric Bootstrap #
###########################
x<-function(data,indices)
{
result <- mean(data[indices])
return(result)
}
mean_CI.bootstrap<-function(n,lambda,alpha){
data<-rexp(n=N,rate=lambda)
mean.npar.boot<-boot(data,x,R=999,sim='ordinary',stype="i")
result<-boot.ci(mean.npar.boot,conf = 1-alpha)
return(result$percent[c(4,5)])
}
ci_bootStrap.mat<-replicate(5000,mean_CI.bootstrap(n,lambda,alpha))
mean((mu>=ci_bootStrap.mat[1,])*(mu<=ci_bootStrap.mat[2,]))
lambda <- 0.01
#sample mean
mu<-(1/lambda)
#value of alpha
alpha<-0.05
# sample size
N    <- 5
###########################
# Nonparametric Bootstrap #
###########################
x<-function(data,indices)
{
result <- mean(data[indices])
return(result)
}
mean_CI.bootstrap<-function(n,lambda,alpha){
data<-rexp(n=N,rate=lambda)
mean.npar.boot<-boot(data,x,R=999,sim='ordinary',stype="i")
result<-boot.ci(mean.npar.boot,conf = 1-alpha)
return(result$percent[c(4,5)])
}
ci_bootStrap.mat<-replicate(5000,mean_CI.bootstrap(n,lambda,alpha))
lambda <- 0.01
#sample mean
mu<-(1/lambda)
#value of alpha
alpha<-0.05
# sample size
N    <- 5
x<-function(data,indices)
{
result <- mean(data[indices])
return(result)
}
mean_CI.bootstrap<-function(n,lambda,alpha){
data<-rexp(n=N,rate=lambda)
mean.npar.boot<-boot(data,x,R=999,sim='ordinary',stype="i")
result<-boot.ci(mean.npar.boot,conf = 1-alpha)
return(result$percent[c(4,5)])
}
ci_bootStrap.mat<-replicate(5000,mean_CI.bootstrap(n,lambda,alpha))
mean((mu>=ci_bootStrap.mat[1,])*(mu<=ci_bootStrap.mat[2,]))
conf.int <- function(mu,N) {
y <-rexp(N, lambda)
sd<-sd(y)
ci <- mean(y) + c(-1, 1) * qnorm(1 - (alpha/2)) * sd/sqrt(N)
return(ci)
}
ci.mat <- replicate(5000, conf.int(mu,N))
mean((mu>=ci.mat[1,])*(mu<=ci.mat[2,]))
data1<-function(N,lambda)
{
data<-rexp(n=N,rate=lambda)
return(data)
}
###########################
# Nonparametric Bootstrap #
###########################
x<-function(data1,indices)
{
result <- mean(data1[indices])
return(result)
}
mean_CI.bootstrap<-function(n,lambda,alpha){
mean.npar.boot<-boot(data1,x,R=999,sim='ordinary',stype="i")
result<-boot.ci(mean.npar.boot,conf = 1-alpha)
return(result$percent[c(4,5)])
}
ci_bootStrap.mat<-replicate(5000,mean_CI.bootstrap(n,lambda,alpha))
mean((mu>=ci_bootStrap.mat[1,])*(mu<=ci_bootStrap.mat[2,]))
lambda <- 0.01
#sample mean
mu<-(1/lambda)
#value of alpha
alpha<-0.05
# sample size
N    <- 5
data1<-function(N,lambda)
{
data<-rexp(n=N,rate=lambda)
return(data)
}
###########################
# Nonparametric Bootstrap #
###########################
x<-function(data1,indices)
{
result <- mean(data1[indices])
return(result)
}
mean_CI.bootstrap<-function(n,lambda,alpha){
mean.npar.boot<-boot(data1,x,R=999,sim='ordinary',stype="i")
result<-boot.ci(mean.npar.boot,conf = 1-alpha)
return(result$percent[c(4,5)])
}
ci_bootStrap.mat<-replicate(5000,mean_CI.bootstrap(n,lambda,alpha))
mean((mu>=ci_bootStrap.mat[1,])*(mu<=ci_bootStrap.mat[2,]))
conf.int <- function(mu,N,data1) {
ci <- mean(data1) + c(-1, 1) * qnorm(1 - (alpha/2)) * sd/sqrt(N)
return(ci)
}
ci.mat <- replicate(5000, conf.int(mu,N))
mean((mu>=ci.mat[1,])*(mu<=ci.mat[2,]))
conf.int <- function(mu,N) {
ci <- mean(data1) + c(-1, 1) * qnorm(1 - (alpha/2)) * sd/sqrt(N)
return(ci)
}
ci.mat <- replicate(5000, conf.int(mu,N))
mean((mu>=ci.mat[1,])*(mu<=ci.mat[2,]))
# use install.packages("boot") to first install
# the package and then load it
library(boot);
# for generating data: true mean
lambda <- 0.01
#sample mean
mu<-(1/lambda)
#value of alpha
alpha<-0.05
# sample size
N    <- 5
x<-function(data,indices)
{
result <- mean(data[indices])
return(result)
}
mean_CI.bootstrap<-function(n,lambda,alpha){
data<-rexp(n=N,rate=lambda)
mean.npar.boot<-boot(data,x,R=999,sim='ordinary',stype="i")
result<-boot.ci(mean.npar.boot,conf = 1-alpha)
return(result$percent[c(4,5)])
}
ci_bootStrap.mat<-replicate(5000,mean_CI.bootstrap(n,lambda,alpha))
mean((mu>=ci_bootStrap.mat[1,])*(mu<=ci_bootStrap.mat[2,]))
###################
# Z statistic CI #
###################
conf.int <- function(mu,N) {
y <-rexp(N, lambda)
sd<-sd(y)
ci <- mean(y) + c(-1, 1) * qnorm(1 - (alpha/2)) * sd/sqrt(N)
return(ci)
}
ci.mat <- replicate(5000, conf.int(mu,N))
mean((mu>=ci.mat[1,])*(mu<=ci.mat[2,]))
conf.int <- function(mu,N) {
y <-rexp(N, lambda)
sd<-sd(y)
ci <- mean(y) + c(-1, 1) * qnorm(1 - alpha/2) * sd/sqrt(N)
return(ci)
}
ci.mat <- replicate(5000, conf.int(mu,N))
mean((mu>=ci.mat[1,])*(mu<=ci.mat[2,]))
sd<-sd(y)
N1=((qnorm(1-(alpha/2)*sd)/(sd/sqrt(N)))^2
N1
N1=((qnorm(1-(alpha/2)*sd)/(sd/sqrt(N)))^2)
N1=((qnorm((1-(alpha/2))*sd)/(sd/sqrt(N)))^2)
N=[((qnorm(1 - (alpha/2))*sd)/(sd/sqrt(N)))^2]
N=((qnorm(1 - (alpha/2))*sd)/(sd/sqrt(N)))^2
N=(Z/(2*SE))^2
z<-qnorm(1 - (alpha/2))
N=(z/(2*SE))^2
z<-qnorm(1 - (alpha/2))
SE<-sd/sqrt(N)
N=(z/(2*SE))^2
N
N=((z*sd)/(SE))^2
N
N=((z*sd)/(2*SE))^2
N
N=((z)/(2*SE))
N
N=((z)/(2*SE))^2
N
z<-qnorm(1-0.025))
SE<-sd/sqrt(N)
N=((z)/(2*SE))^2
z<-qnorm(1-0.025)
SE<-sd/sqrt(N)
N=((z)/(2*SE))^2
N
z<-qnorm(0.975)
SE<-sd/sqrt(N)
N=((z)/(2*SE))^2
N
z<-qnorm(0.05)
SE<-sd/sqrt(N)
N=((z)/(2*SE))^2
N
z<-qnorm(0.05)
SE<-sd/sqrt(N)
N=((z*sd)/(SE))^2
N
z<-qnorm(1-(alpha/2))
SE<-sd/sqrt(N)
N=((z*sd)/(SE))^2
N
z<-qnorm(1 - (alpha/2))
SE<-sd/sqrt(N)
N=((z*sd)/(2*SE))^2
N
z<-qnorm(1 - (alpha/2))
SE<-sd/(sqrt(N))
N=((z*sd)/(2*SE))^2
N
crime <- read.table(file="crime.csv", sep=",", header=T)
advertisement<-read.csv("C:/Users/adrit/Desktop/utd/sem2/stats for ds/project/PROJ6/crime.csv");
crime<-read.csv("C:/Users/adrit/Desktop/utd/sem2/stats for ds/project/PROJ6/crime.csv")
head(crime)
str(house)
str(crime)
x <- house$size
house <- read.table(file="house_price.txt", sep=",", header=T)
crime.reg <- lm (murder rate ~ unemployed, data = crime)
crime.reg <- lm (murder.rate ~ unemployed, data = crime)
summary(crime.reg)
attach(crime)
crime.reg <- lm (murder.rate ~  poverty + high.school + college + single.parent + unemployed + metropolitan + region)
summary(crime.reg)
anova(crime.reg)
confint(crime.reg)
fitted(house.reg)
fitted(crime.reg)
resid(crime.reg)
#is poverty significant
fit1 <- update(crime.reg, . ~ . - poverty)
anova(fit1, crime.reg)
crime.reg <- lm (murder.rate ~  poverty + high.school + college + single.parent + unemployed + metropolitan + region)
summary(crime.reg)
fit2 <- update(crime.reg, . ~ . - high.school)
anova(fit2, crime.reg)
fit3 <- update(crime.reg, . ~ . - college)
anova(fit3, crime.reg)
plot(fitted(fit2), resid(fit2))
abline(h=0)
qqnorm(resid(fit1))
qqline(resid(fit1))
#is poverty significant
fit1 <- update(crime.reg, . ~ . - poverty)
#is poverty significant
fit1 <- update(crime.reg, . ~ . - poverty)
anova(fit1, crime.reg)
fit1 <- update(crime.reg, . ~ . - poverty)
anova(crime.reg,fit1)
#is high school significant
fit2 <- update(crime.reg, . ~ . - high.school)
anova(fit2, crime.reg)
#is college significant
fit3 <- update(crime.reg, . ~ . - college)
anova(crime.reg,fit3)
#is single parent significant
fit4 <- update(crime.reg, . ~ . - single.parent)
anova(crime.reg,fit4)
#is unemployed significant
fit5 <- update(crime.reg, . ~ . - unemployed)
anova(crime.reg,fit5)
#is region significant
fit6 <- update(crime.reg, . ~ . - region)
anova(crime.reg,fit6)
#is metropolitan significant
fit7 <- update(crime.reg, . ~ . - metropolitan)
anova(crime.reg,fit7)
#reduced model:
fit8<-fit1 <- update(crime.reg, . ~ . - single.parent - region)
#reduced model:
reduced<-fit1 <- update(crime.reg, . ~ . - single.parent - region)
summary(reduced)
anova(reduced, crime.reg)
#reduced model:
reduced<- lm(lm (murder.rate ~  single.parent + region))
summary(reduced)
#reduced model:
reduced<- (lm (murder.rate ~  single.parent + region)
summary(reduced)
#reduced model:
reduced<- lm (murder.rate ~  single.parent + region)
summary(reduced)
anova(reduced, crime.reg)
